---
name: panic Automation

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1'

env:
  USERNAME: grocerypanic
  PROJECT_NAME: grocerypanic-backend
  VERBOSE_NOTIFICATIONS: 0

jobs:

  backup_production_database:
    needs: [check_point1]

    runs-on: ubuntu-latest

    steps:

      - name: Backup Production Database -- Checkout
        if: contains(github.ref, '/tags/v')
        uses: actions/checkout@v2

      - name: Backup Production Database -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Backup Production Database -- Prep Admin Environment
        if: contains(github.ref, '/tags/v')
        run: |
          echo -n "${ADMIN_ENV}" | base64 --decode > ./environments/admin.env
          echo -n "${PROD_ENV}" | base64 --decode > ./environments/prod.env
          echo -n "${PROD_SERVICE_ACCOUNT}" | base64 --decode > ./service-account.json
        env:
          ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
          PROD_ENV: ${{ secrets.PROD_ENV }}
          PROD_SERVICE_ACCOUNT: ${{ secrets.PROD_SERVICE_ACCOUNT }}

      - name: Backup Production Database -- Build Admin Container
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/build_container.sh "admin"
        env:
          ADMIN_ENVIRONMENT: "prod"

      - name: Backup Production Database -- Perform Backup
        if: contains(github.ref, '/tags/v')
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh backup-prod'

      - name: Backup Production Database -- Report Success
        if: contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: production database was backed up!"

      - name: Backup Production Database -- Report Failure
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: production database backup failed!"

  check_point1:
    needs: [documentation_test, linter, security_test, shellcheck_test, start_notification, static_analysis, tests_integration, tests_unittests, yaml_linter]

    runs-on: ubuntu-latest

    steps:

      - name: Check Point 1
        if: github.ref == 'check_point1'
        run: echo "Check Point 1"

  check_point2:
    needs: [backup_production_database, create_release, stage_deploy]

    runs-on: ubuntu-latest

    steps:

      - name: Check Point 2
        if: github.ref == 'check_point2'
        run: echo "Check Point 2"

  create_release:
    needs: [check_point1]

    runs-on: ubuntu-latest

    steps:
      - name: Create Release -- Checkout
        if: contains(github.ref, '/tags/v')
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create Release -- Setup Environment
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Release -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        run:
          source ./.github/scripts/changelog.sh

      - name: Create Release -- Create Github Release
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_OR_TAG }}
          release_name: Release ${{ env.BRANCH_OR_TAG }}
          body: |
            ${{ env.CHANGE_LOG_CONTENT }}
            ## PreDeploy Checklist
            - [ ] Ensure minimum frontend version is documented
            - [ ] Ensure readthedocs integration is working
            - [ ] Ensure web/mobile tests are completed in stage environment
            ## Database Migrations Checklist
            - [ ] Are migrations required?  Setup the Admin environment.
            - [ ] Is downtime required?  Use Maintenance mode.
          draft: true
          prerelease: false

      - name: Create Release -- Report Success
        if: contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated release has been created:\nhttps://github.com/${USERNAME}/${PROJECT_NAME}/releases"

      - name: Create Release -- Report Failure
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated release generation failed!"

  documentation_test:

    runs-on: ubuntu-latest

    steps:
      - name: Documentation Test -- Checkout Repository
        uses: actions/checkout@v2

      - name: Documentation Test -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Documentation Test -- Documentation Validation
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'

      - name: Documentation Test -- Report Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: documentation checks were successful!"

      - name: Documentation Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: documentation checks failed!"

  linter:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.8

    steps:
      - name: Linter -- Checkout
        uses: actions/checkout@v2

      - name: Linter -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Linter -- Build Container
        run: |
          source .github/scripts/build_container.sh

      - name: Linter -- Run Pylint
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh lint'

      - name: Linter -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: linting for Python ${PYTHON_VERSION} was successful"

      - name: Linter -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: linting for Python ${PYTHON_VERSION} failed!"

  security_test:

    runs-on: ubuntu-latest

    steps:

      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Documentation Test -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@v1.6.0

      - name: Security Test -- Report Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: security checks were successful!"

      - name: Security Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  shellcheck_test:

    runs-on: ubuntu-latest

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v2

      - name: Shellcheck -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Check Scripts
        run: |
          source .github/scripts/shellcheck.sh

      - name: Shellcheck -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: shellcheck checks were successful!"

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  stage_deploy:
    needs: [check_point1]

    runs-on: ubuntu-20.04

    steps:

      - name: Stage Deploy -- Checkout Codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Stage Deploy -- Setup Environment
        if: github.ref == 'refs/heads/main'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Stage Deploy -- Setup Environment
        if: github.ref == 'refs/heads/main'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Stage Deploy -- Prep Admin Environment
        if: github.ref == 'refs/heads/main'
        run: |
          echo -n "${ADMIN_ENV}" | base64 --decode > ./environments/admin.env
          echo -n "${STAGE_ENV}" | base64 --decode > ./environments/stage.env
          echo -n "${STAGE_SERVICE_ACCOUNT}" | base64 --decode > ./service-account.json
        env:
          ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
          STAGE_ENV: ${{ secrets.STAGE_ENV }}
          STAGE_SERVICE_ACCOUNT: ${{ secrets.STAGE_SERVICE_ACCOUNT }}

      - name: Stage Deploy -- Build Admin Container
        if: github.ref == 'refs/heads/main'
        run: |
          source .github/scripts/build_container.sh "admin"
        env:
          ADMIN_ENVIRONMENT: "stage"

      - name: Stage Deploy -- Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh backup-stage'
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh deploy-stage'

      - name: Stage Deploy -- Report Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated stage deployment was successful!"

      - name: Stage Deploy -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated stage deployment has failed!"

  start_notification:
    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v2

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  static_analysis:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.8

    steps:
      - name: Static Analysis -- Checkout
        uses: actions/checkout@v2

      - name: Static Analysis -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Static Analysis -- Build Container
        run: |
          source .github/scripts/build_container.sh

      - name: Static Analysis -- Run Toc Tree Checker
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh check-toctree'

      - name: Static Analysis -- Type Checker
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh types'

      - name: Static Analysis -- Run Sec Test
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh sectest'

      - name: Static Analysis -- Release Validation
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh check-release'

      - name: Static Analysis -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: static analysis for Python ${PYTHON_VERSION} was successful"

      - name: Static Analysis -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: static analysis for Python ${PYTHON_VERSION} failed!"

  success_notification_build:
    needs: [check_point1]

    runs-on: ubuntu-latest

    steps:
      - name: Successful Build -- Checkout Repository
        uses: actions/checkout@v2

      - name: Successful Build -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Successful Build -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: build was successful!"

      - name: Successful Build -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  success_notification_postbuild:
    needs: [check_point2]

    runs-on: ubuntu-latest

    steps:
      - name: Success Post-Build -- Checkout Repository
        uses: actions/checkout@v2

      - name: Success Post-Build -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success Post-Build -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow is complete!"

      - name: Success Post-Build -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  tests_unittests:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.8

    steps:
      - name: Tests -- Checkout
        uses: actions/checkout@v2

      - name: Tests -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Tests -- Build Container
        run: |
          source .github/scripts/build_container.sh

      - name: Tests - Run Unit Tests & Coverage
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh test coverage'

      - name: Tests -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: unit tests for Python ${PYTHON_VERSION} were successful"

      - name: Tests -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: unit tests for Python ${PYTHON_VERSION} failed!"

  tests_integration:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        include:
          - python-version: 3.8

    steps:
      - name: Tests -- Checkout
        uses: actions/checkout@v2

      - name: Tests -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          PYTHON_VERSION: ${{ matrix.python-version }}

      - name: Tests -- Build Container
        run: |
          source .github/scripts/build_container.sh

      - name: Tests -- Run Integration Tests
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh test integration'

      - name: Tests -- Report Job Status (Success)
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: integration tests for Python ${PYTHON_VERSION} were successful"

      - name: Tests -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: integration tests for Python ${PYTHON_VERSION} failed!"

  yaml_linter:

    runs-on: ubuntu-latest

    steps:
      - name: YAML Linter -- Checkout Repository
        uses: actions/checkout@v2

      - name: YAML Linter -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: YAML Linter -- Run Linter on Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./.github/workflows
          config_file: .yamllint.yml

      - name: YAML Linter -- Run Linter on Workflows
        uses: ibiqlik/action-yamllint@v3
        with:
          format: standard
          file_or_dir: ./*.yml
          config_file: .yamllint.yml

      - name: YAML Linter -- Report Job Status on Success
        if: ${{ env.VERBOSE_NOTIFICATIONS  == '1' }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: YAML linting was successful!"

      - name: YAML Linter -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: YAML linting has failed!"
