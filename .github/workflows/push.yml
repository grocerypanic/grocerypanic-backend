name: panic Automation

on:
  push:
  workflow_dispatch:
  schedule:
    - cron:  '0 6 * * 1'

env:
  ORGNAME: grocerypanic
  REPONAME: grocerypanic-backend
  WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

jobs:

  push:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Production -- Report Success
      run: |
        ./.github/workflows/scripts/notifications.sh ":white_check_mark: CI workflow has started!"
    - name: Create Docker Mounted Content
      run: |
        echo | ssh-keygen
        touch ${HOME}/.gitconfig
        touch ${HOME}/.gitconfig_global
    - name: Ensure File System is Writable by the Container
      run: |
        sudo chmod -R o+w .
    - name: Build Container
      run: |
        docker-compose build
        docker-compose up -d
    - name: Run Toc Tree Checker
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh check-toctree'
    - name: Run Type Checker
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh types'
    - name: Run Sec Test
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh sectest'
    - name: Run Linter
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh lint'
    - name: Run Unit Tests
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh test coverage'
    - name: Run Integration Tests
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh test integration'
    - name: Report Job Status (Success)
      run: |
        ./.github/workflows/scripts/notifications.sh ":white_check_mark: Build was successful!"
    - name: Report Job Status
      if: failure()
      run: |
        ./.github/workflows/scripts/notifications.sh ":x: Build has failed!"

    - name: Stage -- Deploy
      if: github.ref == 'refs/heads/master'
      run: |
        # Deploy to Stage
        echo -n "${ADMIN_ENV}" | base64 --decode > ./environments/admin.env
        echo -n "${STAGE_ENV}" | base64 --decode > ./environments/stage.env
        echo -n "${STAGE_SERVICE_ACCOUNT}" | base64 --decode > ./service-account.json
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh deploy-stage'
      env:
        ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
        STAGE_ENV: ${{ secrets.STAGE_ENV }}
        STAGE_SERVICE_ACCOUNT: ${{ secrets.STAGE_SERVICE_ACCOUNT }}
    - name: Stage -- Report Success
      if: github.ref == 'refs/heads/master'
      run: |
        ./.github/workflows/scripts/notifications.sh ":white_check_mark: Automated deploy to stage!"
    - name: Stage -- Report Failure
      if: failure() && github.ref == 'refs/heads/master'
      run: |
        ./.github/workflows/scripts/notifications.sh ":x: Automated deploy to stage has failed!"
      env:
        REF: ${{ github.ref }}
        EVENT: ${{ github.event_name }}

    - name: Production -- Prepare Release Content
      if: contains(github.ref, '/tags/v')
      run: |
        NEWTAG=${GITHUB_REF#refs/tags/}
        echo "NEWTAG=${NEWTAG}" >> $GITHUB_ENV
        echo "{}" > package.json
    - name: Production -- Generate Changelog
      if: contains(github.ref, '/tags/v')
      uses: scottbrenner/generate-changelog-action@v1.3.1
      id: Changelog
      env:
        REPO: ${{ github.repository }}
    - name: Production -- Create Release
      if: contains(github.ref, '/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEWTAG }}
        release_name: Release ${{ env.NEWTAG }}
        body: |
          ${{ steps.Changelog.outputs.changelog }}
          ## Deployment Checklist
          - [ ] Review Commit History
          - [ ] Ensure minimum frontend version is documented
          - [ ] Ensure readthedocs is building correctly
          - [ ] Ensure unnecessary alerts are ignored/disabled
          - [ ] Successful web/mobile tests completed in stage environment
          - [ ] Pre-deploy database backup
          - [ ] Use Admin environment to complete database migrations
        draft: true
        prerelease: false
    - name: Production -- Report Success
      if: contains(github.ref, '/tags/v')
      run: |
        ./.github/workflows/scripts/notifications.sh ":white_check_mark: Automated release has been created:\nhttps://github.com/${ORGNAME}/${REPONAME}/releases"
    - name: Production -- Report Failure
      if: failure() && contains(github.ref, '/tags/v')
      run: |
        ./.github/workflows/scripts/notifications.sh ":x: Automated release generation has failed!"
