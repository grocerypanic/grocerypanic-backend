name: panic Automation

on:
  push:
  schedule:
    - cron:  '0 6 * * 1'


jobs:

  push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Create Docker Mounted Content
      run: |
        echo | ssh-keygen
        touch ${HOME}/.gitconfig
        touch ${HOME}/.gitconfig_global
    - name: Ensure File System is Writable by the Container
      run: |
        sudo chmod -R 777 .
    - name: Build Container
      run: |
        docker-compose build
        docker-compose up -d
    - name: Run Linter
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh lint-validate'
    - name: Run Sec Test
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh sectest'
    - name: Run Safety from the Host Machine
      run: |
        docker-compose exec -T panic bash -l -c 'pip freeze > safety.txt'
        sudo pip3 install wheel setuptools
        sudo pip3 install safety
        safety check -r safety.txt
    - name: Run Unit Tests
      run: |
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh test coverage'
    - name: Report Job Status
      if: ${{ failure() }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Backend build has failed!"}' "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Stage -- Deploy
      if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
      run: |
        # Deploy to Stage
        echo -n "${ADMIN_ENV}" | base64 --decode > ./environments/admin.env
        echo -n "${STAGE_ENV}" | base64 --decode > ./environments/stage.env
        echo "${STAGE_SERVICE_ACCOUNT}" > ./service-account.json
        docker-compose exec -T panic bash -l -c 'scripts/commander.sh deploy-stage'
      env:
        ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
        STAGE_ENV: ${{ secrets.STAGE_ENV }}
        STAGE_SERVICE_ACCOUNT: ${{ secrets.STAGE_SERVICE_ACCOUNT }}
    - name: Stage -- Report Success
      if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"panic backend: automated deploy to stage!"}' "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    - name: Stage -- Report Failure
      if: ${{ failure() }}
      run: |
        [[ ${REF} == 'refs/heads/develop' ]] && [[ ${EVENT} == 'push' ]] && curl -X POST -H 'Content-type: application/json' --data '{"text":"panic backend: stage deploy has failed!"}' "${WEBHOOK_URL}"
      env:
        WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        REF: ${{ github.ref }}
        EVENT: ${{ github.event_name }}
