---
name: panic-ProductionDeploys

on:
  release:
    types: [published]

env:
  ORGNAME: grocerypanic
  PROJECT_NAME: grocerypanic-backend

jobs:

  production_deploy:

    runs-on: ubuntu-20.04

    steps:

      - name: Production Deploy -- Checkout Codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Production Deploy -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Production Deploy -- Create Docker Mounted Content
        run: |
          echo | ssh-keygen
          touch ${HOME}/.gitconfig
          touch ${HOME}/.gitconfig_global

      - name: Production Deploy -- Ensure File System is Writable by the Container
        run: |
          sudo chmod -R o+w .

      - name: Production Deploy -- Build Container
        run: |
          sed -i.bak 's/target: base/target: deploy/' docker-compose.yml
          source .github/scripts/build_container.sh

      - name: Production Deploy -- Deploy
        run: |
          # Deploy to Production
          echo -n "${ADMIN_ENV}" | base64 --decode > ./environments/admin.env
          echo -n "${PROD_ENV}" | base64 --decode > ./environments/prod.env
          echo -n "${PROD_SERVICE_ACCOUNT}" | base64 --decode > ./service-account.json
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh deploy-prod'
        env:
          ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
          PROD_ENV: ${{ secrets.PROD_ENV }}
          PROD_SERVICE_ACCOUNT: ${{ secrets.PROD_SERVICE_ACCOUNT }}

      - name: Production Deploy -- Report Success
        run: |
          ./.github/workflows/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: Automated production deployment was successful!"

      - name: Production Deploy -- Report Failure
        if: failure()
        run: |
          ./.github/workflows/scripts/notifications.sh "${NOTIFICATION}" ":x: Automated production deployment has failed!"
