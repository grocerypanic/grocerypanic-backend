---
name: panic-ProductionDeploys

on:
  workflow_dispatch:
    inputs:
      TAG:
        description: 'Tag to Deploy'
        required: true
        default: ''
  release:
    types: [published]

env:
  ORGNAME: grocerypanic
  PROJECT_NAME: grocerypanic-backend

jobs:

  production_deploy:

    runs-on: ubuntu-20.04

    steps:

      - name: Production Deploy -- Code Checkout (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.TAG  }}

      - name: Production Deploy -- Code Checkout (Automated Release)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Production Deploy -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Production Deploy -- Report Started
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated production deploy has started!"

      - name: Backup Production Database -- Prep Admin Environment
        run: |
          echo -n "${ADMIN_ENV}" | base64 --decode > ./environments/admin.env
          echo -n "${PROD_ENV}" | base64 --decode > ./environments/prod.env
          echo -n "${PROD_SERVICE_ACCOUNT}" | base64 --decode > ./service-account.json
        env:
          ADMIN_ENV: ${{ secrets.ADMIN_ENV }}
          PROD_ENV: ${{ secrets.PROD_ENV }}
          PROD_SERVICE_ACCOUNT: ${{ secrets.PROD_SERVICE_ACCOUNT }}

      - name: Production Deploy -- Build Admin Container
        run: |
          source .github/scripts/build_container.sh "admin"
        env:
          ADMIN_ENVIRONMENT: "prod"

      - name: Production Deploy -- Deploy
        run: |
          docker-compose exec -T panic bash -l -c 'scripts/commander.sh deploy-prod'

      - name: Production Deploy -- Report Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated production deployment was successful!"

      - name: Production Deploy -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated production deployment has failed!"
